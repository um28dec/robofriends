{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","width","height","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACI,yBAAKC,UAAU,uDACb,yBAAKC,MAAM,MAAMC,OAAQ,MAAMC,IAAK,SAASC,IAAG,+BAA0BL,KAC3E,6BACE,4BAAKF,GACL,2BAAIC,MCaGO,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACE,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdF,KAAMS,EAAOG,GAAGZ,KAChBC,MAAOQ,EAAOG,GAAGX,aCEZa,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACA,yBAAKZ,UAAU,OACV,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCFI,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBlB,OAAQ,UAChEe,EAAMI,WCiBAC,E,kDAnBd,WAAYL,GAAQ,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACZC,UAAU,GAHG,E,8DAOEC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI3B,OAAGG,KAAKJ,MAAMC,SACN,uDAEDG,KAAKV,MAAMI,a,GAhBKQ,aCoDbC,G,wDA9Cd,aAAe,IAAD,8BACb,gBAcFC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd5C,EAAKZ,MAAQ,CACZjB,OAAQ,GACR2B,YAAa,IAJD,E,gEAQO,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAS/B,IAAD,EACwBb,KAAKJ,MAA7BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAGvD,OAAItC,EAAOwC,OAMV,yBAAK9C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUzB,OAAQmC,OAVf,2C,GA5BQZ,cCKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.ed9525cb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email ,id}) => {\n\treturn (\t\n     <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n       <img width=\"200\" height= \"200\" alt ='robots' src={`https://robohash.org/${id}`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n     </div>     \n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n     {  \n      robots.map((user,i) => {\n        return (\n          <Card \n  \t       key={i} \n  \t       id={robots[i].id} \n  \t       name={robots[i].name} \n  \t       email={robots[i].email} \n  \t      />\n        ); \n      })\n    } \n  </div> \n );\n}   \nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t<div className='pa2'> \t\n      <input \n       className='pa3 ba b--green bg-lightest-blue'\n       type='search' \n       placeholder='search robots' \n       onChange={searchChange}\n       />\n    </div>   \n);\n}\n\nexport default SearchBox;\n","import React from 'react' ;\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n        {props.children}\n    </div>\n  \t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tconstructor(props) {\n      super(props);\n      this.state = {\n      \thasError: false\n      }\n    }\n\n    componentDidCatch(error, info) {\n      this.setState({ hasError: true})\n    }\n\n    render() {\n    \tif(this.state.hasError) {\n    \t\treturn <h1>Oops. That is not good </h1>\n    \t}\n    \treturn this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\nclass App extends Component {\n constructor() {\n \tsuper()\n \tthis.state = {\n \t\trobots: [],\n \t\tsearchfield: ''\n \t}\n }\n\n componentDidMount() {\n \tfetch('https://jsonplaceholder.typicode.com/users')\n \t.then(response => response.json())\n \t.then(users => {this.setState({ robots: users}) }) ;\n }\n\n\nonSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\t\n  }\n\n\n render() {\n  const { robots, searchfield } = this.state;\t\n  const filteredRobots = robots.filter(robot => {\n   \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n   })\n\n  if(!robots.length){\n  \treturn <h1>Loading</h1>\n  }\n  else{\n\n  return (\n   <div className='tc'>\n     <h1 className='f1'>RoboFriends</h1>\n     <SearchBox searchChange={this.onSearchChange} />\n     <Scroll>\n       <ErrorBoundary>\n       <CardList robots={filteredRobots} />\n       </ErrorBoundary>\n     </Scroll>\n   </div>\n  );\n}  \n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}